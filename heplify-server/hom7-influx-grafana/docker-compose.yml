version: '2.1'

services:

  db:
    image: postgres:11-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: homerSeven
      POSTGRES_USER: root
    expose:
      - 5432
    restart: unless-stopped
    volumes:
      - ./conf/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "psql -h 'localhost' -U 'root' -c '\\l'"]
      interval: 1s
      timeout: 3s
      retries: 30

  heplify-server:
    image: sipcapture/heplify-server
    container_name: heplify-server
    ports:
      - "9069:9060"
      - "9060:9060/udp"
      - "9061:9061/tcp"
    command:
      - './heplify-server'
    environment:
      - "HEPLIFYSERVER_HEPADDR=0.0.0.0:9060"
      - "HEPLIFYSERVER_HEPTCPADDR=0.0.0.0:9061"
      - "HEPLIFYSERVER_DBDRIVER=postgres"
      - "HEPLIFYSERVER_DBSHEMA=homer7"
      - "HEPLIFYSERVER_DBADDR=db:5432"
      - "HEPLIFYSERVER_DBUSER=root"
      - "HEPLIFYSERVER_DBPASS=homerSeven"
      - "HEPLIFYSERVER_DBDATATABLE=homer_data"
      - "HEPLIFYSERVER_DBROTATE=true"
      - "HEPLIFYSERVER_LOGLVL=debug"
      - "HEPLIFYSERVER_LOGSTD=true"
      - "HEPLIFYSERVER_PROMADDR=0.0.0.0:9096"
#      - "HEPLIFYSERVER_PROMTARGETIP="
#      - "HEPLIFYSERVER_PROMTARGETNAME="
      - "HEPLIFYSERVER_DBDROPDAYS=7"
      - "HEPLIFYSERVER_ALEGIDS=X-CID"
    restart: unless-stopped
    expose:
      - 9090
    depends_on:
     db:
       condition: service_healthy
    labels:
      org.label-schema.group: "monitoring"

  loki:
    image: grafana/loki
    container_name: loki
    restart: unless-stopped
    expose:
      - 3100
    ports:
      - "3100:3100"
    labels:
      org.label-schema.group: "monitoring"

  homer-webapp:
    container_name: homer-webapp
    image: sipcapture/webapp
    environment:
      - "LOKI_HOST=loki"
      - "PROM_HOST=prometheus"
      - "DB_HOST=db"
      - "DB_USER=root"
      - "DB_PASS=homerSeven"
    ports:
      - "9090:80"
    expose:
      - 80
    restart: unless-stopped
    volumes:
      - ./bootstrap:/app/bootstrap
    depends_on:
      db:
        condition: service_healthy

  telegraf:
    image: telegraf:1.14-alpine
    restart: unless-stopped
    volumes:
      - ./conf/telegraf.conf:/etc/telegraf/telegraf.conf
    ports:
      - "8094:8094/udp"
      - "8094:8094/tcp"
      - "8092:8092/udp"
      - "8125:8125/udp"
    depends_on:
      - heplify-server

  influxdb:
    image: influxdb:1.8-alpine
    volumes:
      - ./influx:/var/lib/influxdb
    expose:
      - 8086

  grafana:
    image: grafana/grafana:master
    container_name: grafana
    volumes:
      - ./grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_OAUTH_AUTO_LOGIN=true
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_EXPLORE_ENABLED=true
    restart: unless-stopped
    ports:
      - "3000:3000"
    expose:
      - 3000
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/login || exit 1"]
      interval: 1s
      timeout: 3s
      retries: 30
    labels:
      org.label-schema.group: "monitoring"

  provisioning:
    image: alpine:latest
    links:
      - influxdb
    volumes:
      - ./conf/homer_dashboard.json:/tmp/homer_dashboard.json
    command: 
      - /bin/sh
      - -c
      - |
        apk add --no-cache curl;
        echo Waiting for influxdb API ...;
        while ! nc -z influxdb 8086;
        do
          sleep 1;
        done;
        echo InfluxDB Retention Policy push ...;
        curl -G http://influxdb:8086/query --data-urlencode 'q=CREATE DATABASE homer'
        curl -G http://influxdb:8086/query --data-urlencode 'q=CREATE RETENTION POLICY "60s" ON "homer" DURATION 4w REPLICATION 1 DEFAULT'
        curl -G http://influxdb:8086/query --data-urlencode 'q=drop retention policy "autogen" ON "homer"'
        echo Chronograf Dashboard push ...;
        curl -i -X POST -H "Content-Type: application/json" http://chronograf/chronograf/v1/dashboards -d @/tmp/homer_dashboard.json
        echo Provisioning completed! Exiting ...;
        poweroff;

